apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template
metadata:
  name: terraform-simple-static-site
  title: Simple Static Site
  description: |
    Creates the infrastructure to host a static website using an AWS S3 bucket and CloudFront distribution.

  tags:
    - terraform
    - aws
    - static-site
    - devcontainer
    - gh-actions
    - new
spec:
  owner: group:cds-snc/internal-sre
  type: service

  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
    - title: Fill in Project Details
      required:
        - name
        - owner
        - license
        - domain
        - subdomain
      properties:
        name:
          title: Name
          type: string
          description: Unique name of the component
          pattern: "^[a-z0-9-]*$"
          ui:autofocus: true
          ui:options:
            rows: 5
        owner:
          title: Owner
          type: string
          description: The owner team of the component
          ui:field: OwnerPicker
          ui:options:
            catalogFilter:
              kind: Group
              spec.type: team
            allowArbitraryValues: false
        domain:
          title: Domain Name
          type: string
          description: The domain of the project where the website will be hosted
          default: cdssandbox.xyz
          enum:
            - cdssandbox.xyz
            - alpha.canada.ca
        subdomain:
          title: Subdomain
          type: string
          description: The subdomain of the project where the website will be hosted
          pattern: "^[a-z0-9-]*$"
        license:
          title: License
          type: string
          description: The license of the project
          default: MIT
          enum:
            - MIT
            - Apache-2.0
            - GPL-3.0
            - BSD-3-Clause
            - Unlicense
            - Other

    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          description: Name of the repository where the component will be stored
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
            allowedOrganizations:
              - cds-snc
            allowedOwners:
              - cds-snc

    - title: AWS Account
      required:
        - account
        - billing_code
      properties:
        account:
          title: AWS Account
          type: string
          description: The AWS account where the infrastructure will be deployed
          pattern: "^[0-9]*$"
        billing_code:
          title: Billing Code
          type: string
          description: The billing code for the AWS account
          pattern: "^[a-zA-Z0-9_-]*$"

  # These steps are executed in the scaffolder backend, using data that we gathered
  # via the parameters above.
  steps:
    # Each step executes an action, in this case one templates files into the working directory.
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./content
        values:
          name: ${{ parameters.name }}
          owner: ${{ parameters.owner }}
          license: ${{ parameters.license }}
          repoUrl: "github.com/cds-snc/${{ parameters.repoUrl }}"
          account: ${{ parameters.account }}
          billing_code: ${{ parameters.billing_code }}
          domain_name: ${{ parameters.subdomain }}.${{ parameters.domain }}

    - id: log-values
      name: Log Values
      action: debug:log
      input:
        message: |
         "Simple Static website configuration has been added to ${{ parameters.repoUrl }} with the following settings:"
          repoUrl: "${{ parameters.repoUrl }}"
          name: ${{ parameters.name }}
          owner: ${{ parameters.owner }}
          license: ${{ parameters.license }}
          account: ${{ parameters.account }}
          billing_code: ${{ parameters.billing_code }}
          domain_name: ${{ parameters.subdomain }}.${{ parameters.domain }}


    # This step publishes the contents of the working directory to GitHub.
    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ["github.com"]
        description: This is ${{ parameters.name }}
        repoUrl: "${{ parameters.repoUrl }}"
        repoVisibility: private
        defaultBranch: main
        homepage: ${{ parameters.subdomain }}.${{ parameters.domain }}

    # The final step is to register our new component in the catalog.
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: "/catalog-info.yaml"

  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
